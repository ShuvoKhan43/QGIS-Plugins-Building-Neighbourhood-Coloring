# -*- coding: utf-8 -*-

"""
/***************************************************************************
 ColorBuilding
                                 A QGIS plugin
 want to color building more than one neighbor
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2024-10-19
        copyright            : (C) 2024 by MdRaisulIslam
        email                : 32ismd1mpg@hft-stuttgart.de
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'MdRaisulIslam'
__date__ = '2024-10-19'
__copyright__ = '(C) 2024 by MdRaisulIslam'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

from qgis.PyQt.QtCore import QCoreApplication
from qgis.core import (QgsProcessing,
                       QgsFeatureSink,
                       QgsProcessingAlgorithm,
                       QgsProcessingParameterFeatureSource,
                       QgsProcessingParameterFeatureSink,
                       QgsVectorLayer,
                       QgsSymbol,
                       QgsField,
                       QgsFields,
                       QgsWkbTypes,
                       QgsProject,
                       QgsCategorizedSymbolRenderer,
                       QgsRendererCategory)
from qgis.PyQt.QtCore import QVariant
from qgis.PyQt.QtGui import QColor
from qgis.utils import iface


class ColorBuildingAlgorithm(QgsProcessingAlgorithm):

    # Constants used to refer to parameters and outputs.
    OUTPUT = 'OUTPUT'
    INPUT = 'INPUT'

    def initAlgorithm(self, config=None):
        """
        Here we define the inputs and output of the algorithm,
        along with some other properties.
        """
        # We add the input vector features source.
        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.INPUT,
                self.tr('Input layer'),
                [QgsProcessing.TypeVectorAnyGeometry]
            )
        )

        # We add a feature sink to store processed features.
        self.addParameter(
            QgsProcessingParameterFeatureSink(
                self.OUTPUT,
                self.tr('Output layer')
            )
        )

    def processAlgorithm(self, parameters, context, feedback):
        """
        This function will process the input data and handle errors.
        """
        try:
            # Access the input layer parameter as a vector layer
            input_layer = self.parameterAsVectorLayer(
                parameters,
                self.INPUT,
                context
            )

            if not input_layer.isValid():
                feedback.reportError("Invalid input layer!")
                return {self.OUTPUT: None}

            # Add a new field to store the number of neighbors
            input_layer.startEditing()
            neighbor_field = QgsField("NNeighbors", QVariant.Int)
            input_layer.addAttribute(neighbor_field)

            # Create a dictionary to store neighbor counts
            neighbor_counts = {feature.id(): 0 for feature in input_layer.getFeatures()}

            # Count neighbors for each building
            for feature in input_layer.getFeatures():
                current_geom = feature.geometry()
                for neighbor in input_layer.getFeatures():
                    if feature.id() != neighbor.id() and current_geom.intersects(neighbor.geometry()):
                        neighbor_counts[feature.id()] += 1

            # Update the field with neighbor counts
            for building_id, count in neighbor_counts.items():
                input_layer.changeAttributeValue(building_id, input_layer.fields().indexFromName("NNeighbors"), count)

            # Commit changes after editing
            input_layer.commitChanges()

            # Set up symbols for rendering
            symbols = {
                "No_Neighbor": QgsSymbol.defaultSymbol(input_layer.geometryType()),
                "One_Neighbor": QgsSymbol.defaultSymbol(input_layer.geometryType()),
                "Multiple_Neighbors": QgsSymbol.defaultSymbol(input_layer.geometryType()),
            }
            symbols["No_Neighbor"].setColor(QColor('yellow'))
            symbols["One_Neighbor"].setColor(QColor('blue'))
            symbols["Multiple_Neighbors"].setColor(QColor('red'))

            # Create categories for rendering based on neighbor counts
            categories = [
                QgsRendererCategory(0, symbols["No_Neighbor"], 'No Neighbor'),
                QgsRendererCategory(1, symbols["One_Neighbor"], 'One Neighbor'),
                QgsRendererCategory(2, symbols["Multiple_Neighbors"], 'Two or More Neighbors'),
            ]

            # Apply categorized renderer using the "NNeighbors" field
            categorized_renderer = QgsCategorizedSymbolRenderer('NNeighbors', categories)
            input_layer.setRenderer(categorized_renderer)

            # Ensure the renderer is set correctly
            input_layer.triggerRepaint()

            # Refresh the map canvas and update the view
            iface.mapCanvas().setExtent(input_layer.extent())
            iface.mapCanvas().refresh()

            # Add the updated layer to the current QGIS project
            QgsProject.instance().addMapLayer(input_layer)

        except Exception as e:
            # Handle exceptions, providing feedback about the error
            feedback.reportError(f"An error occurred: {str(e)}")
            return {self.OUTPUT: None}

        return {self.OUTPUT: input_layer.id()}

    def name(self):
        return 'colorbuilding'

    def displayName(self):
        return self.tr('Color Building Algorithm')

    def group(self):
        return self.tr('Neighbor Building Color')

    def groupId(self):
        return 'neighbor_building_color'

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return ColorBuildingAlgorithm()
